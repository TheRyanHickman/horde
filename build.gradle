buildscript {
    dependencies {
        classpath 'com.sandec.jpro:jpro-plugin-gradle:2019.2.1'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://sandec.bintray.com/repo"
        }
    }
}
plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    id 'org.openjfx.javafxplugin' version '0.0.8'
//    id 'com.redock.classpathtofile' version '0.0.1'
}


group 'com.kg'
version '0.1'
apply plugin: 'com.google.osdetector'
ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

//sourceCompatibility = 1.8


repositories {
    mavenLocal()
    mavenCentral()
    //maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.simpleframework', name: 'simple-xml', version: '2.7.1'
    compile group: 'com.googlecode.soundlibs', name: 'tritonus-share', version: '0.3.7.4'
//    implementation 'org.openjfx:javafx:+'
//    implementation 'org.openjfx:javafx:+'
//    implementation 'org.openjfx:javafx:14-ea+6'
    // Add your dependencies here, for example:
    // compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.14'
    compile "org.openjfx:javafx-base:13:$platform"
    compile "org.openjfx:javafx-graphics:13:$platform"
    compile "org.openjfx:javafx-controls:13:$platform"
    compile "org.openjfx:javafx-fxml:13:$platform"
    compile "org.openjfx:javafx-media:13:$platform"
    compile "org.openjfx:javafx-web:13:$platform"

//    compile group: 'com.palantir.python.miniconda', name: 'com.palantir.python.miniconda.gradle.plugin', version: '0.8.0', ext: 'pom'
//    api 'anaconda:protobuf:3.8.0'
//    test conda-forge:pytest:5.1.2

    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.6'
    compile group: 'com.google.guava', name: 'guava', version: '11.0.2'
    compile group: 'org.bytedeco', name: 'javacv', version: '1.3.1'
    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
    compile('se.michaelthelin.spotify:spotify-web-api-java:1.5.0')


//    compile fileTree(include: ['*.jar'], dir: 'libs/*')

    compile group: 'org.encog', name: 'encog-core', version: '3.3.0'
    compile group: 'org.bytedeco', name: 'javacpp', version: '1.3.2'
    compile 'org.deeplearning4j:deeplearning4j-nlp:0.8.0'
    compile 'org.nd4j:nd4j-cuda-8.0-platform:0.8.0'
    compile 'org.nd4j:nd4j-cuda-8.0:0.8.0:windows-x86_64'
    compile group: 'jfree', name: 'jfreechart', version: '1.0.13'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    compile fileTree(include: ['*.jar'], dir: 'libs/Algs4')
    compile fileTree(include: ['*.jar'], dir: 'libs/Graphstream')
    compile fileTree(include: ['*.jar'], dir: 'libs/Hsqldb')
    compile fileTree(include: ['*.jar'], dir: 'libs/JGraphT')
    compile fileTree(include: ['*.jar'], dir: 'libs/MusicG')
    compile fileTree(include: ['*.jar'], dir: 'libs/Sqljet')
    compile fileTree(include: ['*.jar'], dir: 'libs/Tarsos')
    compile fileTree(include: ['*.jar'], dir: 'libs/Weka')
    compile fileTree(include: ['*.jar'], dir: 'libs/Wub')

//    implementation "org.gradle:gradle-tooling-api:+"
    // The tooling API need an SLF4J implementation available at runtime, replace this with any other implementation
//    runtimeOnly 'org.slf4j:slf4j-simple:1.7.10'

}

//
javafx {
    version = "13"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base', 'javafx.graphics', 'javafx.media', 'javafx.swing', 'javafx.web']
}

application {
//    mainClassName = 'eu.hansolo.fx.regulators.Main'
    mainClassName = 'com.kg.TheHorde'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'data'
        }
    }
}

compileJava {
    doFirst {
        def classpathJavaFX = classpath.filter{ File file ->
            file.name.contains( "javafx" )
        }
        options.compilerArgs = [
                '--module-path',classpathJavaFX.asPath,
                '--add-exports', 'java.desktop/com.sun.media.sound=ALL-UNNAMED',
                '--add-modules', 'javafx.fxml,javafx.controls'
        ]
    }
}


run {
    doFirst {
        def classpathJavaFX = classpath.filter{ File file ->
            file.name.contains( "javafx" )
        }
        jvmArgs = [
                '--module-path', classpathJavaFX.asPath,
                '--add-exports', 'java.desktop/com.sun.media.sound=ALL-UNNAMED',
                '--add-modules', 'javafx.fxml,javafx.controls'
        ]
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.kg.Main'
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        sourceSets.main.output
    }


}

shadowJar {
    baseName = 'horde'
    classifier = null
    version = null
}

//apply plugin: 'javafx-gradle-plugin'
//jfx {
//    // minimal requirement for jfxJar-task
//    mainClass = 'com.klemstine.TheHorde'
//
//    // minimal requirement for jfxNative-task
//    vendor = 'KlemstineGroup'
//}

/**
 ******************  jpro Configuration ******************
 */
apply plugin: 'com.sandec.jpro'


/**
 * App Main Class
 */
//mainClassName = 'com.jpro.hellojpro.HelloJPro'
mainClassName = 'com.kg.TheHorde'

/**
 * jpro settings
 */
jpro {
    // for debugging
    // JVMArgs << '-agentlib:jdwp=transport=dt_socket,server=n,address=5006,suspend=y'

    JVMArgs << '-Xmx1000m'

    //jpro server port
    port = 8080

}

/*task installSpleeter {
    doLast {
        exec {
            workingDir 'spleeter'
            commandLine 'python', 'setup.py'
        }
//        exec {
//            workingDir 'spleeter'
//            commandLine 'python','-m','spleeter', 'separate','-h'
//        }
    }


}*/
//task runSpleeter {
//    if (System.hasProperty("spleeter1")) {
//        doLast {
//            exec {
//                workingDir 'spleeter'
//                commandLine 'python', 'setup.py'
//            }
//            exec {
////            workingDir '.'
//                commandLine 'python', '-m', 'spleeter', 'separate', '-p', 'spleeter:2stems', '-i', System.properties['spleeter1'], '-o', System.properties['spleeter2']
////            commandLine 'spleeter', System.properties['spleeter']
//            }
//        }
//    }
//}

/*task runSpleeter2 {
    doLast {
        exec {
            workingDir './venv/Scripts'
            commandLine 'python', '-m', 'spleeter', System.properties['spleeter']
        }
    }

}*/
